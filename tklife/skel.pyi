import abc
import tkinter
import typing
from .controller import ControllerABC
from .proxy import CallProxyFactory
from collections.abc import Iterable
from functools import partial
T_Widget = typing.TypeVar("T_Widget", tkinter.Widget, tkinter.Misc)

class SkelWidget:
    widget: typing.Type[tkinter.Widget]
    init_args: dict[str, typing.Any]
    grid_args: dict[str, typing.Any]
    label: typing.Optional[str]
    def __iter__(self): ...
    def init(self, **merge_init_args: typing.Any) -> SkelWidget: ...
    def grid(self, **merge_grid_args: typing.Any) -> SkelWidget: ...
    def set_label(self, new_label: str) -> SkelWidget: ...
    def __init__(self, widget, init_args, grid_args, label) -> None: ...

class CreatedWidget(typing.Generic[T_Widget]):
    def __init__(self, widget: T_Widget, textvariable: typing.Optional[tkinter.Variable] = ..., variable: typing.Optional[tkinter.Variable] = ..., listvariable: typing.Optional[tkinter.Variable] = ..., **custom_vars: tkinter.Variable) -> None: ...
    @property
    def widget(self) -> T_Widget: ...
    @property
    def textvariable(self) -> tkinter.Variable: ...
    @property
    def variable(self) -> tkinter.Variable: ...
    @property
    def listvariable(self) -> tkinter.Variable: ...
    def __getattr__(self, attr: str) -> tkinter.Variable: ...
    def __getitem__(self, attr: str) -> tkinter.Variable: ...
    def __setitem__(self, *args) -> None: ...
    def __setattr__(self, __name: str, __value: typing.Any) -> None: ...
    def as_dict(self): ...
T_CreatedWidgetDict = dict[str, CreatedWidget]

class CachedWidget(typing.NamedTuple):
    widget: typing.Union[tkinter.Widget, None]
    grid_args: typing.Union[dict[str, typing.Any], None]

class T_SkeletonProtocol(metaclass=abc.ABCMeta):
    @property
    def controller(self) -> typing.Union[ControllerABC, CallProxyFactory]: ...
    created: T_CreatedWidgetDict

class SkeletonMeta(abc.ABCMeta):
    def __new__(cls, name, bases: tuple[type, ...], namespace): ...

class _Skel(metaclass=SkeletonMeta): ...

class SkeletonMixin(_Skel, metaclass=abc.ABCMeta):
    created: T_CreatedWidgetDict
    def __init__(self, master: typing.Optional[tkinter.Misc] = ..., controller: typing.Optional[ControllerABC] = ..., global_grid_args: typing.Optional[dict[str, typing.Any]] = ..., proxy_factory: typing.Optional[CallProxyFactory] = ..., **kwargs) -> None: ...
    def __before_init__(self) -> None: ...
    def __after_init__(self) -> None: ...
    def __after_widgets__(self) -> None: ...
    @property
    @abc.abstractmethod
    def template(self) -> Iterable[Iterable[SkelWidget]]: ...
    @property
    def widget_cache(self) -> dict[tuple[int, int], CachedWidget]: ...
    def create_events(self) -> None: ...
    def append_row(self, widget_row: Iterable[SkelWidget]) -> int: ...
    def insert_row_at(self, index: int, widget_row: Iterable[SkelWidget]): ...
    def destroy_row(self, row_index: int) -> None: ...
    def find_row_of(self, label: str) -> typing.Union[int, None]: ...
    @property
    def controller(self) -> typing.Union[CallProxyFactory, ControllerABC]: ...
    @controller.setter
    def controller(self, controller: ControllerABC): ...

class MenuMixin(abc.ABC, metaclass=abc.ABCMeta):
    def __init__(self, master: typing.Optional[tkinter.Misc] = ..., **kwargs: typing.Any) -> None: ...
    @property
    @abc.abstractmethod
    def menu_template(self) -> dict: ...
T_MenuCommand = typing.Callable[[tkinter.Menu], None]

class Menu:
    def __new__(cls): ...
    @classmethod
    def add(cls, **opts: typing.Any) -> partial: ...
    @classmethod
    def command(cls, **opts: typing.Any) -> T_MenuCommand: ...
    @classmethod
    def cascade(cls, **opts: typing.Any) -> T_MenuCommand: ...
