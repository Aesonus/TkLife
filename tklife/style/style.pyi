from tkinter.ttk import Style, Widget
from typing import Any, Literal, Optional

class _StyleMeta(type):
    defined_styles: dict[str, 'BaseStyle']
    def __new__(cls, name, bases, namespace): ...
    @property
    def ttk_style(cls): ...
    def __getitem__(cls, stylename): ...
    def define_all(cls, style: Optional[Style] = ...): ...
    def set_style(cls, widget: Widget): ...
    def as_dict(cls) -> dict[Literal['style'], str]: ...

class BaseStyle(metaclass=_StyleMeta):
    configure: dict[str, Any]
    map: dict[str, list[tuple[Any, ...]]]

class TProgressbar(BaseStyle): ...
class TScrollbar(BaseStyle): ...
class TButton(BaseStyle): ...
class TCheckbutton(BaseStyle): ...
class TCombobox(BaseStyle): ...
class TEntry(BaseStyle): ...
class TFrame(BaseStyle): ...
class TLabel(BaseStyle): ...
class TLabelFrame(BaseStyle): ...
class TMenubutton(BaseStyle): ...
class TNotebook(BaseStyle): ...
class TPanedwindow(BaseStyle): ...
class TRadiobutton(BaseStyle): ...
class TSeparator(BaseStyle): ...
class TSizegrip(BaseStyle): ...
class Treeview(BaseStyle): ...
