import abc
from typing import Generator, Optional, Union

class CommandHistory:
    history: list['Command']
    cursor: Union[int, None]
    def __init__(self) -> None: ...
    def add_history(self, command: Command) -> None: ...
    def undo(self) -> Union[int, None]: ...
    def redo(self) -> Union[int, None]: ...
    def undo_all(self, until: Optional[int] = ...) -> None: ...
    def reset(self) -> None: ...
    def __len__(self) -> int: ...
    def iter_history(self) -> Generator['Command', None, None]: ...

class Command(abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def execute(self) -> None: ...
    @abc.abstractmethod
    def reverse(self) -> None: ...
